"""
Django settings for orthos2 project.

Generated by 'django-admin startproject' using Django 1.10.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import logging
import logging.config
import os
import sys
from logging.handlers import SysLogHandler
from socket import getfqdn, gethostbyname, gethostname
from pwd import getpwuid

import ldap
from django.contrib.messages import constants as messages
from django_auth_ldap.config import GroupOfNamesType, LDAPSearch

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
if os.getenv('ORTHOS_DEV'):
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
else:
    BASE_DIR = os.path.abspath('/var/lib/orthos2')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$@c7_nq(oi56nl3*-!_(=&-j_=n3=^2f5dydr4chxlwckg_947'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', gethostname(), getfqdn()]

# Application definition

INSTALLED_APPS = [
    'orthos2.data.apps.DataConfig',
    'orthos2.frontend.apps.FrontendConfig',
    'orthos2.taskmanager.apps.TaskManagerConfig',
    'orthos2.utils.apps.UtilsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'orthos2.api.apps.APIConfig',
    'rest_framework',
    'rest_framework.authtoken',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'orthos2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'orthos2.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'database' if not os.getenv('ORTHOS_DEV') else '', 'db.sqlite3'),
    }
}

RUN_AS_USER = 'orthos'
CUR_USER = getpwuid( os.getuid())[ 0 ]

if os.getenv('ORTHOS_DEV'):
    RUN_AS_USER = CUR_USER

if CUR_USER != RUN_AS_USER:
    logging.error("You must run as user: {}, not as user: {}".
                 format(RUN_AS_USER, CUR_USER))
    exit(1)

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_L10N = False

USE_TZ = True

DATETIME_FORMAT = 'd N Y, H:i (e)'
SHORT_DATETIME_FORMAT = 'Y-m-d H:i'
DATE_FORMAT = 'd N Y'
SHORT_DATE_FORMAT = 'Y-m-d'

DATE_INPUT_FORMATS = [
    '%Y-%m-%d',
]

# LDAP authentication
AUTH_LDAP_SERVER_URI = os.environ.get('LDAP_HOST', default="")
AUTH_LDAP_BIND_DN = os.environ.get('LDAP_USERNAME')
AUTH_LDAP_BIND_PASSWORD = os.environ.get('LDAP_PASSWORD')
AUTH_LDAP_USER_SEARCH = LDAPSearch(
    'dc=example,dc=com',
    ldap.SCOPE_SUBTREE,
    '(uid=%(user)s)',
)
AUTH_LDAP_USER_ATTR_MAP = {
    'username': 'uid',
    'first_name': 'givenName',
    'last_name': 'sn',
    'email': 'mail',
}
AUTH_LDAP_ALWAYS_UPDATE_USER = True
AUTH_LDAP_CACHE_TIMEOUT = 3600

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
DEFAULT_LOG = ['console', 'file']

logging.addLevelName(logging.CRITICAL, 'CC')
logging.addLevelName(logging.ERROR, 'EE')
logging.addLevelName(logging.WARNING, 'WW')
logging.addLevelName(logging.INFO, 'II')
logging.addLevelName(logging.DEBUG, 'DD')
logging.addLevelName(logging.NOTSET, 'NS')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'syslog': {
            'format': '[%(asctime)s][%(name)s][%(levelname)s]: %(message)s'
        },
        'simple': {
            'format': '[%(name)s][%(levelname)s]: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'syslog',
            'filename': os.path.join('/var/log/orthos2' if not os.getenv('ORTHOS_DEV') else BASE_DIR, 'default.log'),
        },
    },
    'loggers': {
        'orthos': {
            'handlers': DEFAULT_LOG,
            'level': 'DEBUG',
        },
        'models': {
            'handlers': DEFAULT_LOG,
            'level': 'DEBUG',
        },
        'utils': {
            'handlers': DEFAULT_LOG,
            'level': 'DEBUG',
        },
        'tasks': {
            'handlers': DEFAULT_LOG,
            'level': 'DEBUG',
        },
        'api': {
            'handlers': DEFAULT_LOG,
            'level': 'DEBUG',
        },
        'components': {
            'handlers': DEFAULT_LOG,
            'level': 'DEBUG',
        },
        'views': {
            'handlers': DEFAULT_LOG,
            'level': 'DEBUG',
        },
        "django_auth_ldap": {
            "handlers": DEFAULT_LOG,
            "level": "DEBUG",
        }
    }
}

logging.config.dictConfig(LOGGING)
logger = logging.getLogger('orthos')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'


# Login URL
LOGIN_URL = '/login/'

# On logout, go back to the starting page
LOGOUT_REDIRECT_URL = "/"


# Override messages settings for Bootstrap
MESSAGE_TAGS = {
    messages.ERROR: 'danger'
}


# REST framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    )
}


# Orthos variables
SERVER_FQDN = 'orthos.domain.tld'
BASE_URL = 'https://orthos.domain.tld'
CONTACT = 'tbd@domain.tld'
SUPPORT_CONTACT = 'tbd@domain.tld'
VERSION = '2.0.0'
SYSTEM_USER = 'orthos'


# Check for alternative settings file. If this file exists, we use it and evaluate the code.
# This is intended to be used for production mode.
SETTINGS_FILE = '/etc/orthos2/settings'

if os.access(SETTINGS_FILE, os.R_OK):
    logger.info("Found alternative settings: {}".format(SETTINGS_FILE))
    with open(SETTINGS_FILE, 'r') as f:
        settings = f.read()
    try:
        exec(settings, globals())
    except Exception as e:
        logger.exception("Error while parsing alternative settings: {}".format(e))
        logger.error("File content:\n{}".format(settings))
        sys.exit(1)
