# Generated by Django 4.2.20 on 2025-07-03 10:54

from typing import Any, Dict, List

import django.db.models.deletion
from django.apps.registry import Apps
from django.conf import settings
from django.db import migrations, models
from django.db.backends.base.schema import BaseDatabaseSchemaEditor

import orthos2.data.validators

REMOTE_POWER_TYPE_BMC_NAME = "Dummy BMC"
REMOTE_POWER_TYPE_RPOWERDEVICE_NAME = "Dummy Remote Power Device"
REMOTE_POWER_TYPE_HYPERVISOR_NAME = "Dummy Hypervisor"


def create_initial_remotepowertypes(
    app_registry: Apps, schema_editor: BaseDatabaseSchemaEditor
):
    """
    Create initial dummy RemotePowerType entries to satisfy non-nullable foreign key constraints
    in BMC, RemotePower, and RemotePowerDevice models.
    """
    db_alias = schema_editor.connection.alias
    RemotePowerType = app_registry.get_model("data", "RemotePowerType")
    RemotePowerType.objects.using(db_alias).bulk_create(
        [
            RemotePowerType(name=REMOTE_POWER_TYPE_BMC_NAME, device="bmc"),
            RemotePowerType(
                name=REMOTE_POWER_TYPE_RPOWERDEVICE_NAME, device="rpowerdevice"
            ),
            RemotePowerType(
                name=REMOTE_POWER_TYPE_HYPERVISOR_NAME, device="hypervisor"
            ),
        ],
        ignore_conflicts=True,
    )


def migrate_settings_py_remote_power_types(
    app_registry: Apps, schema_editor: BaseDatabaseSchemaEditor
):
    """
    Migrate settings.py remote power types to RemotePowerType model.
    This is necessary to ensure that the RemotePowerType model is populated with the correct data.
    """
    db_alias = schema_editor.connection.alias
    RemotePowerType = app_registry.get_model("data", "RemotePowerType")
    Architecture = app_registry.get_model("data", "Architecture")
    System = app_registry.get_model("data", "System")
    existing_types: List[Dict[str, Any]] = []
    if hasattr(settings, "REMOTEPOWER_TYPES"):
        existing_types = settings.REMOTEPOWER_TYPES  # type: ignore
    for remote_power_type in existing_types:
        architecture_names: List[str] = remote_power_type.get("arch", [])
        system_names: List[str] = remote_power_type.get("system", [])
        architecture_ids: List[int] = []
        system_ids: List[int] = []
        for name in architecture_names:
            try:
                architecture = Architecture.objects.using(db_alias).get(name=name)
                architecture_ids.append(architecture.id)
            except Architecture.DoesNotExist:
                continue
        for name in system_names:
            try:
                system = System.objects.using(db_alias).get(name=name)
                system_ids.append(system.id)
            except System.DoesNotExist:
                continue
        RemotePowerType.objects.using(db_alias).create(
            name=remote_power_type.get("fence", ""),
            device=remote_power_type.get("device", ""),
            username=remote_power_type.get("username", ""),
            password=remote_power_type.get("password", ""),
            identity_file=remote_power_type.get("identity_file", ""),
            use_port=remote_power_type.get("port", False),
            use_hostname_as_port=remote_power_type.get("use_hostname_as_port", False),
        )
        fence_agent = RemotePowerType.objects.using(db_alias).get(
            name=remote_power_type.get("fence", "")
        )
        fence_agent.architectures.set(architecture_ids)
        fence_agent.systems.set(system_ids)
        fence_agent.save()


def set_null_fence_agents(app_registry: Apps, schema_editor: BaseDatabaseSchemaEditor):
    """
    Set existing fence_agent fields to null for BMC, RemotePower, and RemotePowerDevice models
    to avoid integrity errors when removing the fence_name field.
    """
    db_alias = schema_editor.connection.alias
    BMC = app_registry.get_model("data", "BMC")
    RemotePowerDevice = app_registry.get_model("data", "RemotePowerDevice")
    RemotePowerType = app_registry.get_model("data", "RemotePowerType")
    RemotePower = app_registry.get_model("data", "RemotePower")
    power_type_bmc = RemotePowerType.objects.using(db_alias).get(
        name=REMOTE_POWER_TYPE_BMC_NAME
    )
    power_type_rpowerdevice = RemotePowerType.objects.using(db_alias).get(
        name=REMOTE_POWER_TYPE_RPOWERDEVICE_NAME
    )
    power_type_hypervisor = RemotePowerType.objects.using(db_alias).get(
        name=REMOTE_POWER_TYPE_HYPERVISOR_NAME
    )

    db_alias = schema_editor.connection.alias
    for bmc in BMC.objects.all():
        try:
            bmc.fence_agent = RemotePowerType.objects.get(name=bmc.fence_name)
        except RemotePowerType.DoesNotExist:
            bmc.fence_agent = power_type_bmc
        bmc.save()
    for rpower_device in RemotePowerDevice.objects.all():
        try:
            rpower_device.fence_agent = RemotePowerType.objects.get(
                name=rpower_device.fence_name
            )
        except RemotePowerType.DoesNotExist:
            rpower_device.fence_agent = power_type_rpowerdevice
        rpower_device.save()
    for remotepower in RemotePower.objects.all():
        if remotepower.fence_name == "":
            # Skip objects that have an empty fence name
            continue
        try:
            remotepower.fence_agent = RemotePowerType.objects.get(
                name=remotepower.fence_name
            )
        except RemotePowerType.DoesNotExist:
            remotepower.fence_agent = power_type_hypervisor
        remotepower.save()


class Migration(migrations.Migration):

    dependencies = [
        ("data", "0047_machine_netbox_id"),
    ]

    operations = [
        migrations.CreateModel(
            name="RemotePowerType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="Remote Power Type"
                    ),
                ),
                (
                    "device",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("bmc", "BMC"),
                            ("rpowerdevice", "Remote Power Device"),
                            ("hypervisor", "Hypervisor"),
                        ],
                        help_text="Device type for remote power control",
                        max_length=128,
                        verbose_name="Device",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        help_text="Username for remote power control",
                        max_length=256,
                        verbose_name="Username",
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        blank=True,
                        help_text="Password for remote power control",
                        max_length=256,
                        verbose_name="Password",
                    ),
                ),
                (
                    "identity_file",
                    models.CharField(
                        blank=True,
                        help_text="Path to identity file for SSH authentication",
                        max_length=256,
                        verbose_name="Identity File",
                    ),
                ),
                (
                    "use_port",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to use a specific port for remote power control",
                        verbose_name="Use Port",
                    ),
                ),
                (
                    "use_hostname_as_port",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to use the hostname as the port for remote power control",
                        verbose_name="Use Hostname as Port",
                    ),
                ),
                (
                    "architectures",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Architectures supported by this remote power type",
                        related_name="remotepowertypes",
                        to="data.architecture",
                        verbose_name="Supported Architectures",
                    ),
                ),
                (
                    "systems",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Systems supported by this remote power type",
                        related_name="remotepowertypes",
                        to="data.system",
                        verbose_name="Supported Systems",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="bmc",
            name="fence_agent",
            field=models.ForeignKey(
                help_text="Fence agent for remote power control",
                limit_choices_to={"device": "bmc"},
                on_delete=django.db.models.deletion.CASCADE,
                to="data.remotepowertype",
                verbose_name="Fence agent",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="remotepower",
            name="fence_agent",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="data.remotepowertype",
                verbose_name="Fence Agent",
            ),
        ),
        migrations.AddField(
            model_name="remotepowerdevice",
            name="fence_agent",
            field=models.ForeignKey(
                limit_choices_to={"device": "rpowerdevice"},
                on_delete=django.db.models.deletion.CASCADE,
                to="data.remotepowertype",
                verbose_name="Fence agent",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="remotepowerdevice",
            name="mac",
            field=models.CharField(
                max_length=17,
                unique=True,
                null=True,
                validators=[orthos2.data.validators.validate_mac_address],
            ),
        ),
        migrations.RunPython(create_initial_remotepowertypes),
        migrations.RunPython(migrate_settings_py_remote_power_types),
        migrations.RunPython(set_null_fence_agents),
        migrations.AlterField(
            model_name="bmc",
            name="fence_agent",
            field=models.ForeignKey(
                help_text="Fence agent for remote power control",
                limit_choices_to={"device": "bmc"},
                on_delete=django.db.models.deletion.CASCADE,
                to="data.remotepowertype",
                verbose_name="Fence agent",
            ),
        ),
        migrations.AlterField(
            model_name="remotepowerdevice",
            name="fence_agent",
            field=models.ForeignKey(
                limit_choices_to={"device": "rpowerdevice"},
                on_delete=django.db.models.deletion.CASCADE,
                to="data.remotepowertype",
                verbose_name="Fence agent",
            ),
        ),
        migrations.RemoveField(
            model_name="bmc",
            name="fence_name",
        ),
        migrations.RemoveField(
            model_name="remotepower",
            name="fence_name",
        ),
        migrations.RemoveField(
            model_name="remotepowerdevice",
            name="fence_name",
        ),
    ]
